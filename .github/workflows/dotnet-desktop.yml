# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]
        platform: [x86]

    runs-on: windows-latest  # For a list of available runner types, refer to
    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: TwelveToneTech.StrandsSolver.sln
      Solution_Name_NoAppPkg: TwelveToneTech.StrandsSolver_NoAppPkg.slnf
      Test_Project_Path: Solver.Tests\Solver.Tests.csproj
      Wap_Project_Directory: WindowsApplicationPackaging
      Wap_Project_Path: WindowsApplicationPackaging\WindowsApplicationPackaging.wapproj

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      
      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2
      
      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}
      
      # Build the solution
      - name: Build the solution
        run: msbuild $env:Solution_Name_NoAppPkg /t:Build /p:Configuration=$env:Configuration /p:"ExcludeProjectsFromBuild=WindowsApplicationPackaging" /p:RuntimeIdentifiers="win-x86" /p:Platform="x86"
        env:
          Configuration: ${{ matrix.configuration }}
      
      # Execute all unit tests in the solution
      - name: Execute unit tests
        run: dotnet test --configuration ${{ matrix.configuration }} --no-build --verbosity normal $env:Test_Project_Path
      
      # Decode the base 64 encoded pfx and save the Signing_Certificate
      - name: Decode the pfx
        id: decode_pfx
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
          $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
          New-Item -Path $certificatePath -Force
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
      
      # Create the app package by building and packaging the Windows Application Packaging project
      - name: Create the app package
        run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword='${{ secrets.Pfx_Key }}'
        env:
          Appx_Bundle: Always
          Appx_Bundle_Platforms: x86|x64
          Appx_Package_Build_Mode: SideloadOnly
          Configuration: ${{ matrix.configuration }}
      
      # Remove the pfx
      - name: Remove the pfx
        run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx -Force
        if: ${{ steps.decode_pfx.outcome == 'success' }}
      
      # Set Date-Based Version for the Release (Moved Up)
      - name: Set Date-Based Version
        id: version_generator
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        shell: pwsh
        run: |
          $version = (Get-Date -Format "yyyy.MM.dd") + ".${{ github.run_number }}"
          Write-Host "Generated Version: $version"
          echo "version_number=$version" >> $env:GITHUB_OUTPUT

      # New Step: Create Release ZIP Package
      - name: Create Release ZIP Package
        id: create_zip_package
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        shell: pwsh
        run: |
          $appPackagesDir = "${{ env.Wap_Project_Directory }}\AppPackages"
          # Find the directory containing the app bundle and install script (often ends with _Test)
          $packageContentDir = Get-ChildItem -Path $appPackagesDir -Directory -Recurse | Where-Object {$_.Name -like "*_Test" -or (Test-Path (Join-Path $_.FullName "*.msixbundle"))} | Select-Object -First 1
          
          If (-not $packageContentDir) {
            Write-Error "Release content directory (e.g., *_Test or containing .msixbundle) not found in $appPackagesDir"
            Write-Host "Listing contents of $appPackagesDir for debugging:"
            Get-ChildItem -Path $appPackagesDir -Recurse | ForEach-Object { Write-Host $_.FullName }
            exit 1
          }
          Write-Host "Found package content directory: $($packageContentDir.FullName)"
          
          $zipName = "Solver_v${{ steps.version_generator.outputs.version_number }}.zip"
          $zipPath = Join-Path -Path $appPackagesDir -ChildPath $zipName
          
          Compress-Archive -Path "$($packageContentDir.FullName)\*" -DestinationPath $zipPath -Force
          Write-Host "Created release ZIP: $zipPath"
          echo "zip_path=$zipPath" >> $env:GITHUB_OUTPUT
          echo "zip_name=$zipName" >> $env:GITHUB_OUTPUT

      # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MSIX Package and Release ZIP
          path: ${{ env.Wap_Project_Directory }}\AppPackages
      
      # Create a GitHub Release
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.version_generator.outputs.version_number != '' && steps.create_zip_package.outputs.zip_path != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: v${{ steps.version_generator.outputs.version_number }}
          name: Release v${{ steps.version_generator.outputs.version_number }}
          body: |
            Automated release v${{ steps.version_generator.outputs.version_number }}.
            Commit: ${{ github.sha }}
            Release package (ZIP) attached. This ZIP contains the application bundle and an install.ps1 script for installing the self-signed certificate and the application.
          draft: false
          prerelease: false
          allowUpdates: true
      
      # Upload the ZIP package as a release asset
      - name: Upload Release Asset (ZIP Package)
        uses: actions/upload-release-asset@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.create_zip_package.outputs.zip_path != '' && steps.create_release.outputs.upload_url != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.create_zip_package.outputs.zip_path }}
          asset_name: ${{ steps.create_zip_package.outputs.zip_name }}
          asset_content_type: application/zip
